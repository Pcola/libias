-------------------------------------------------------- 
--  TABLES
--------------------------------------------------------

CREATE TABLE "BAM_USER" 
(
	"USER_ID" NUMBER(10,0), 
	"USERNAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(100 BYTE), 
	"FIRST_NAME" VARCHAR2(100 BYTE), 
	"LAST_NAME" VARCHAR2(100 BYTE), 
	"ACTIVE" NUMBER(3,0), 
	"PUBLIC_SECRET" VARCHAR2(100 BYTE), 
	"PRIVATE_SECRET" VARCHAR2(100 BYTE), 
	"DIENSTSTELLE_ID" VARCHAR2(32 BYTE)
);

CREATE TABLE "BILD"
(
	"OID" NUMBER(10,0),
	"JOB_ID" VARCHAR2(20 BYTE),
	"DATE_CREATED" DATE,	
	"BILDDATEN" BLOB
);

CREATE TABLE "LOG" 
(
	"LOG_ID" NUMBER(19,0), 
	"SEVERITY" VARCHAR2(10 BYTE),
	"METHOD" VARCHAR2(200 BYTE),
	"MESSAGE" VARCHAR2(2000 BYTE), 	
	"TIMESTAMP" TIMESTAMP (0) DEFAULT SYSTIMESTAMP, 
	"USER_ID" NUMBER(10,0), 	
	"TYPE" NUMBER(10,0)
);

CREATE TABLE "LOG_TYPE" 
(
	"TYPE_ID" NUMBER(10,0), 
	"TYPE" VARCHAR2(50 BYTE) DEFAULT NULL
);

CREATE TABLE "REPORT" 
(
	"ID" NUMBER(10,0), 
	"CASE_ID" NUMBER(10,0), 
	"REPORT" BLOB, 
	"CREATED" TIMESTAMP (6), 
	"CREATED_BY" NUMBER(10,0)
);

CREATE TABLE "STATUS" 
(
	"STATUS_ID" NUMBER(10,0), 
	"STATUS" VARCHAR2(30 BYTE)
);

CREATE TABLE "USER_ROLE"
(
	"ROLE_ID" NUMBER(10,0),
	"ROLE" VARCHAR2(30 BYTE)	
);

CREATE TABLE "USER_ROLE2BAM_USER" 
(
	"ROLE_ID" NUMBER, 
	"USER_ID" NUMBER
);

CREATE TABLE  "DIENSTSTELLE" 
(
	"ID" VARCHAR2(32 BYTE), 
	"DIENSTSTELLE" VARCHAR2(32 BYTE)
);

CREATE TABLE "PRIORITY" 
(
	"PRIORITY_ID" NUMBER(10,0), 
	"PRIORITY" VARCHAR2(30 BYTE)
);

CREATE TABLE "INCIDENT"
(
	"CASE_ID" NUMBER(10,0),
	"PROBE_ID" NUMBER(10,0),
	"GALLERY_ID" NUMBER(10,0),
	"SCORE" BINARY_DOUBLE,
	"RANK" NUMBER(3,0) DEFAULT NULL,
	"JOB_ID" VARCHAR2(20 BYTE),
	"DATE_CREATED" DATE,
	"FILTER" NUMBER(3,0),
	"PRIORITY_ID" NUMBER(10,0) DEFAULT 3,
	"DIENSTSTELLE_ID" VARCHAR2(32 BYTE),	 
	"STATUS_ID" NUMBER(10,0) DEFAULT 1,
	"BEMERKUNG" VARCHAR2(1000 BYTE),
	"AUSSENSTELLE_BEMERKUNG" VARCHAR2(1000 BYTE),
	"AKTENREFERENZ_OID" NUMBER(10,0),
	"REFERENZBEZEICHNUNG" VARCHAR2(64 BYTE),
	"A_ANTRAGSTELLER_OID" NUMBER(10,0),
	"A_PKZ" NUMBER(10,0),
	"A_AKTENZEICHEN" VARCHAR2(32 BYTE),
	"A_AZRNUMMER" VARCHAR2 (12 BYTE),
	"A_DNUMMER" VARCHAR2 (128 BYTE),
	"A_ENUMMER" VARCHAR2 (128 BYTE),
	"A_EURODACNR" VARCHAR2 (128 BYTE),
	"A_FAMILIENNAME" VARCHAR2 (64 BYTE),
	"A_VORNAME" VARCHAR2 (64 BYTE),
	"A_GEBURTSDATUM" DATE,
	"A_GEBURTSORT" VARCHAR2 (64 BYTE),
	"A_HERKUNFTSLAND" VARCHAR2 (64 BYTE),
	"A_GEBURTSLAND" VARCHAR2 (64 BYTE),
	"A_ANTRAGSDATUM" DATE,
	"A_ANTRAGSTYP" VARCHAR2 (64 BYTE),
	"A_AUSSENSTELLE" VARCHAR2 (64 BYTE),
	"A_GESCHLECHT" VARCHAR2 (1 BYTE),
	"A_STAATSANGEHOERIGKEIT" VARCHAR2 (64 BYTE),
	"A_DATE_MODIFIED" DATE,
	"A_PROTECTED" NUMBER(3,0),
	"B_ANTRAGSTELLER_OID" NUMBER(10,0),
	"B_PKZ" NUMBER(10,0),
	"B_AKTENZEICHEN" VARCHAR2(32 BYTE),
	"B_AZRNUMMER" VARCHAR2 (12 BYTE),
	"B_DNUMMER" VARCHAR2 (128 BYTE),
	"B_ENUMMER" VARCHAR2 (128 BYTE),
	"B_EURODACNR" VARCHAR2 (128 BYTE),
	"B_FAMILIENNAME" VARCHAR2 (64 BYTE),
	"B_VORNAME" VARCHAR2 (64 BYTE),
	"B_GEBURTSDATUM" DATE,
	"B_GEBURTSORT" VARCHAR2 (64 BYTE),
	"B_HERKUNFTSLAND" VARCHAR2 (64 BYTE),
	"B_GEBURTSLAND" VARCHAR2 (64 BYTE),
	"B_ANTRAGSDATUM" DATE,
	"B_ANTRAGSTYP" VARCHAR2 (64 BYTE),
	"B_AUSSENSTELLE" VARCHAR2 (64 BYTE),
	"B_GESCHLECHT" VARCHAR2 (1 BYTE),
	"B_STAATSANGEHOERIGKEIT" VARCHAR2 (64 BYTE),
	"B_DATE_MODIFIED" DATE,
	"B_PROTECTED" NUMBER(3,0)
);

--------------------------------------------------------
--  SEQUENCES AND TRIGGERS
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Sequence INCIDENT_SEQ
--------------------------------------------------------
CREATE SEQUENCE "INCIDENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE;

--------------------------------------------------------
--  DDL for Sequence LOG_SEQ
--------------------------------------------------------
CREATE SEQUENCE "LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE;

--------------------------------------------------------
--  DDL for Sequence REPORT_SEQ
--------------------------------------------------------
CREATE SEQUENCE "REPORT_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE;

--------------------------------------------------------
--  DDL for Sequence USER_SEQ
--------------------------------------------------------
CREATE SEQUENCE "USER_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 NOCACHE  NOORDER  NOCYCLE;

--------------------------------------------------------
--  DDL for Trigger INCIDENT_SEQ_TR
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "INCIDENT_SEQ_TR" BEFORE INSERT ON INCIDENT
FOR EACH ROW WHEN (NEW.CASE_ID IS NULL)
BEGIN
	SELECT INCIDENT_SEQ.NEXTVAL INTO :NEW.CASE_ID FROM DUAL;
END;
/

--------------------------------------------------------
--  DDL for Trigger LOG_SEQ_TR
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "LOG_SEQ_TR" BEFORE INSERT ON LOG
FOR EACH ROW WHEN (NEW.LOG_ID IS NULL)
BEGIN
	SELECT LOG_SEQ.NEXTVAL INTO :NEW.LOG_ID FROM DUAL;
END;
/

--------------------------------------------------------
--  DDL for Trigger REPORT_SEQ_TR
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "REPORT_SEQ_TR" BEFORE INSERT ON LOG
FOR EACH ROW WHEN (NEW.LOG_ID IS NULL)
BEGIN
	SELECT LOG_SEQ.NEXTVAL INTO :NEW.LOG_ID FROM DUAL;
END;
/

--------------------------------------------------------
--  DDL for Trigger USER_SEQ_TR
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "USER_SEQ_TR" BEFORE INSERT ON "BAM_USER"
FOR EACH ROW WHEN (NEW.USER_ID IS NULL)
BEGIN
	SELECT USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

--------------------------------------------------------
--  INDEXES
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Index INCIDENT_DNUMMER
--------------------------------------------------------
CREATE INDEX  "INCIDENT_A_DNUMMER" ON  "INCIDENT" ("A_DNUMMER") ;
CREATE INDEX  "INCIDENT_B_DNUMMER" ON  "INCIDENT" ("B_DNUMMER") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_AKTENREFID
--------------------------------------------------------
CREATE INDEX  "INCIDENT_AKTENREF_OID" ON  "INCIDENT" ("AKTENREFERENZ_OID") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_ANTRAGSTELLER_OID
--------------------------------------------------------
CREATE INDEX  "INCIDENT_A_ANTRAGSTELLER_OID" ON  "INCIDENT" ("A_ANTRAGSTELLER_OID") ;
CREATE INDEX  "INCIDENT_B_ANTRAGSTELLER_OID" ON  "INCIDENT" ("B_ANTRAGSTELLER_OID") ;
  
--------------------------------------------------------
--  DDL for Index INCIDENT_PID
--------------------------------------------------------
CREATE INDEX  "INCIDENT_PID" ON  "INCIDENT" ("PROBE_ID") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_GID
--------------------------------------------------------
CREATE INDEX  "INCIDENT_GID" ON  "INCIDENT" ("GALLERY_ID") ;
  
--------------------------------------------------------
--  DDL for Index INCIDENT_AKTENZEICHEN
--------------------------------------------------------
CREATE INDEX  "INCIDENT_A_AKTENZEICHEN" ON  "INCIDENT" ("A_AKTENZEICHEN") ;
CREATE INDEX  "INCIDENT_B_AKTENZEICHEN" ON  "INCIDENT" ("B_AKTENZEICHEN") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_PKZ
--------------------------------------------------------
CREATE INDEX  "INCIDENT_A_PKZ" ON  "INCIDENT" ("A_PKZ") ;
CREATE INDEX  "INCIDENT_B_PKZ" ON  "INCIDENT" ("B_PKZ") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_PRID
--------------------------------------------------------
CREATE INDEX  "INCIDENT_PRID" ON  "INCIDENT" ("PRIORITY_ID") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_SID
--------------------------------------------------------
CREATE INDEX  "INCIDENT_SID" ON  "INCIDENT" ("STATUS_ID") ;

--------------------------------------------------------
--  DDL for Index PRIORITY_ID
--------------------------------------------------------
CREATE INDEX  "PRIORITY_ID" ON  "PRIORITY" ("PRIORITY_ID") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_FILTER
--------------------------------------------------------
CREATE INDEX  "INCIDENT_FILTER" ON  "INCIDENT" ("FILTER") ;

--------------------------------------------------------
--  DDL for Index INCIDENT_PK
--------------------------------------------------------
CREATE UNIQUE INDEX  "INCIDENT_PK" ON  "INCIDENT" ("CASE_ID") ;

--------------------------------------------------------
--  DDL for Index REPORT_PK
--------------------------------------------------------
CREATE UNIQUE INDEX  "REPORT_PK" ON  "REPORT" ("ID") ;
  
--------------------------------------------------------
--  DDL for Index BILD_OID
--------------------------------------------------------
CREATE UNIQUE INDEX  "BILD_OID" ON  "BILD" ("OID") ;

--------------------------------------------------------
--  DDL for Index DIENSTSTELLE_PK
--------------------------------------------------------
CREATE UNIQUE INDEX  "DIENSTSTELLE_PK" ON  "DIENSTSTELLE" ("ID") ;

--------------------------------------------------------
--  DDL for Index USERNAME
--------------------------------------------------------
CREATE UNIQUE INDEX  "USERNAME" ON  "BAM_USER" ("USERNAME") ;

--------------------------------------------------------
--  CONSTRAINTS
--------------------------------------------------------

--------------------------------------------------------
--  Constraints for Table BAM_USER
--------------------------------------------------------
ALTER TABLE  "BAM_USER" ADD CONSTRAINT "USERNAME" UNIQUE ("USERNAME")
USING INDEX;
ALTER TABLE  "BAM_USER" ADD PRIMARY KEY ("USER_ID")
USING INDEX;
ALTER TABLE  "BAM_USER" ADD CHECK ("USER_ID" > 0) ENABLE;
ALTER TABLE  "BAM_USER" MODIFY ("USER_ID" NOT NULL ENABLE);
ALTER TABLE  "BAM_USER" MODIFY ("ACTIVE" NOT NULL ENABLE);
ALTER TABLE  "BAM_USER" MODIFY ("LAST_NAME" NOT NULL ENABLE);
ALTER TABLE  "BAM_USER" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
ALTER TABLE  "BAM_USER" MODIFY ("PASSWORD" NOT NULL ENABLE);
ALTER TABLE  "BAM_USER" MODIFY ("USERNAME" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table DIENSTSTELLE
--------------------------------------------------------
ALTER TABLE  "DIENSTSTELLE" ADD CONSTRAINT "DIENSTSTELLE_PK" PRIMARY KEY ("ID") USING INDEX;

--------------------------------------------------------
--  Constraints for Table LOG
--------------------------------------------------------
ALTER TABLE  "LOG" ADD PRIMARY KEY ("LOG_ID") USING INDEX;
ALTER TABLE  "LOG" ADD CHECK ("TYPE" > 0) ENABLE;
ALTER TABLE  "LOG" MODIFY ("TYPE" NOT NULL ENABLE);
ALTER TABLE  "LOG" MODIFY ("TIMESTAMP" NOT NULL ENABLE);
ALTER TABLE  "LOG" MODIFY ("MESSAGE" NOT NULL ENABLE);
ALTER TABLE  "LOG" MODIFY ("LOG_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table LOG_TYPE
--------------------------------------------------------
ALTER TABLE  "LOG_TYPE" ADD PRIMARY KEY ("TYPE_ID") USING INDEX;
ALTER TABLE  "LOG_TYPE" ADD CHECK ("TYPE_ID" > 0) ENABLE;
ALTER TABLE  "LOG_TYPE" MODIFY ("TYPE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USER_ROLE
--------------------------------------------------------
ALTER TABLE  "USER_ROLE" ADD PRIMARY KEY ("ROLE_ID") USING INDEX;
ALTER TABLE  "USER_ROLE" ADD CHECK ("ROLE_ID" > 0) ENABLE;
ALTER TABLE  "USER_ROLE" MODIFY ("ROLE" NOT NULL ENABLE);
ALTER TABLE  "USER_ROLE" MODIFY ("ROLE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table BILD
--------------------------------------------------------
ALTER TABLE  "BILD" ADD CONSTRAINT "BILD_PK" PRIMARY KEY ("OID") USING INDEX;
ALTER TABLE  "BILD" MODIFY ("OID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table USER_ROLE2BAM_USER
--------------------------------------------------------
ALTER TABLE  "USER_ROLE2BAM_USER" MODIFY ("USER_ID" NOT NULL ENABLE);
ALTER TABLE  "USER_ROLE2BAM_USER" MODIFY ("ROLE_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table REPORT
--------------------------------------------------------
ALTER TABLE  "REPORT" ADD CONSTRAINT "REPORT_PK" PRIMARY KEY ("ID") USING INDEX;

--------------------------------------------------------
--  Constraints for Table STATUS
--------------------------------------------------------
ALTER TABLE  "STATUS" ADD PRIMARY KEY ("STATUS_ID") USING INDEX;
ALTER TABLE  "STATUS" ADD CHECK ("STATUS_ID" > 0) ENABLE;
ALTER TABLE  "STATUS" MODIFY ("STATUS" NOT NULL ENABLE);
ALTER TABLE  "STATUS" MODIFY ("STATUS_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table PRIORITY
--------------------------------------------------------
ALTER TABLE  "PRIORITY" ADD PRIMARY KEY ("PRIORITY_ID") USING INDEX;
ALTER TABLE  "PRIORITY" ADD CHECK ("PRIORITY_ID" > 0) ENABLE;
ALTER TABLE  "PRIORITY" MODIFY ("PRIORITY" NOT NULL ENABLE);
ALTER TABLE  "PRIORITY" MODIFY ("PRIORITY_ID" NOT NULL ENABLE);

--------------------------------------------------------
--  Constraints for Table INCIDENT
-------------------------------------------------------
ALTER TABLE  "INCIDENT" ADD CONSTRAINT "INCIDENT_PK" PRIMARY KEY ("CASE_ID") USING INDEX;
ALTER TABLE  "INCIDENT" MODIFY ("CASE_ID" NOT NULL ENABLE);
ALTER TABLE  "INCIDENT" ADD CHECK ("CASE_ID" > 0) ENABLE;
ALTER TABLE  "INCIDENT" MODIFY ("JOB_ID" NOT NULL ENABLE);
ALTER TABLE  "INCIDENT" MODIFY ("GALLERY_ID" NOT NULL ENABLE);
ALTER TABLE  "INCIDENT" MODIFY ("PROBE_ID" NOT NULL ENABLE); 
ALTER TABLE  "INCIDENT" ADD CHECK ("STATUS_ID" > 0) ENABLE;
ALTER TABLE  "INCIDENT" ADD CHECK ("PRIORITY_ID" > 0) ENABLE;
ALTER TABLE  "INCIDENT" ADD CHECK ("RANK" > 0) ENABLE;
ALTER TABLE  "INCIDENT" MODIFY ("SCORE" NOT NULL ENABLE);

--------------------------------------------------------
--  REF CONSTRAINTS
--------------------------------------------------------

--------------------------------------------------------
--  Ref Constraints for Table INCIDENT
--------------------------------------------------------
ALTER TABLE  "INCIDENT" ADD CONSTRAINT "INCIDENT_GALLERYID_BILD_FK" FOREIGN KEY ("GALLERY_ID")
	REFERENCES  "BILD" ("OID") ENABLE;
ALTER TABLE  "INCIDENT" ADD CONSTRAINT "INCIDENT_PROBEID_BILD_FK" FOREIGN KEY ("PROBE_ID")
	REFERENCES  "BILD" ("OID") ENABLE;
ALTER TABLE  "INCIDENT" ADD CONSTRAINT "INCIDENT_PRIORITIES_FK" FOREIGN KEY ("PRIORITY_ID")
	REFERENCES  "PRIORITY" ("PRIORITY_ID") ENABLE;	  
ALTER TABLE  "INCIDENT" ADD CONSTRAINT "INCIDENT_STATUS_FK" FOREIGN KEY ("STATUS_ID")
	REFERENCES  "STATUS" ("STATUS_ID") ENABLE;
ALTER TABLE  "INCIDENT" ADD CONSTRAINT "INCIDENT_DIENSTSTELLE_FK" FOREIGN KEY ("DIENSTSTELLE_ID")
	REFERENCES  "DIENSTSTELLE" ("ID") ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table BAM_USER
--------------------------------------------------------
ALTER TABLE  "BAM_USER" ADD CONSTRAINT "BAM_USER_FK1" FOREIGN KEY ("DIENSTSTELLE_ID")
	REFERENCES  "DIENSTSTELLE" ("ID") ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table LOG
--------------------------------------------------------
ALTER TABLE  "LOG" ADD CONSTRAINT "LOGS_LOGTYPE_FK" FOREIGN KEY ("TYPE")
	REFERENCES  "LOG_TYPE" ("TYPE_ID") ENABLE;
ALTER TABLE  "LOG" ADD CONSTRAINT "LOGS_USER_FK" FOREIGN KEY ("USER_ID")
	REFERENCES  "BAM_USER" ("USER_ID") ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table REPORT
--------------------------------------------------------
ALTER TABLE  "REPORT" ADD CONSTRAINT "REPORT_BAM_USER_FK" FOREIGN KEY ("CREATED_BY")
	REFERENCES  "BAM_USER" ("USER_ID") ENABLE;
ALTER TABLE  "REPORT" ADD CONSTRAINT "REPORT_INCIDENT_FK" FOREIGN KEY ("CASE_ID")
	REFERENCES  "INCIDENT" ("CASE_ID") ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table USER_ROLE2BAM_USER
--------------------------------------------------------
ALTER TABLE  "USER_ROLE2BAM_USER" ADD CONSTRAINT "USER_ROLE2BAM_USER_FK1" FOREIGN KEY ("ROLE_ID")
	REFERENCES  "USER_ROLE" ("ROLE_ID") ENABLE;
ALTER TABLE  "USER_ROLE2BAM_USER" ADD CONSTRAINT "USER_ROLE2BAM_USER_FK2" FOREIGN KEY ("USER_ID")
	REFERENCES  "BAM_USER" ("USER_ID") ENABLE;

--------------------------------------------------------
--  PROCEDURES
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Procedure IMPORT_COGNITEC_TO_LIBIAS
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_COGNITEC_TO_LIBIAS (pJOB_ID IN VARCHAR) AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  NO_RESULTS_EX EXCEPTION;

  TYPE RESULTS IS TABLE OF DBSCANADMIN.CROSSIDENTIFICATIONRESULTS%ROWTYPE;
  RESULTS_TO_IMPORT RESULTS;

  TYPE IDS IS TABLE OF INCIDENT.CASE_ID%TYPE;
  CASES_IDS IDS;

  TODAY DATE := TRUNC(SYSDATE);

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS WHERE JOBID = pJOB_ID;
    CASE
        WHEN RESULTS_COUNT > 0 AND RESULTS_COUNT <= 100000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 100000 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        ELSE RAISE NO_RESULTS_EX;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        SELECT RANK, JOBID, GALLERYID, SCORE, PROBEID BULK COLLECT INTO RESULTS_TO_IMPORT FROM (
          SELECT RANK, JOBID, GALLERYID, SCORE, PROBEID, ROWNUM RNUM FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS
          WHERE JOBID = pJOB_ID AND ROWNUM <= (RESULTS_IMPORTED + BATCH_SIZE) ORDER BY ROWID
        ) WHERE RNUM > RESULTS_IMPORTED;

        FORALL i IN RESULTS_TO_IMPORT.first .. RESULTS_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO INCIDENT(CASE_ID, PROBE_ID, GALLERY_ID, SCORE, RANK, JOB_ID, DATE_CREATED, FILTER, PRIORITY_ID, STATUS_ID)
        VALUES (INCIDENT_SEQ.NEXTVAL, RESULTS_TO_IMPORT(i).PROBEID, RESULTS_TO_IMPORT(i).GALLERYID, RESULTS_TO_IMPORT(i).SCORE, RESULTS_TO_IMPORT(i).RANK, pJOB_ID, TODAY, 0, 1, 1)
        RETURNING CASE_ID BULK COLLECT INTO CASES_IDS;

        RESULTS_IMPORTED := RESULTS_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
        VALUES ('IMPORT_COGNITEC_TO_LIBIAS', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, NULL, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_RESULTS_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS', 'DEBUG', 'STATUS: NO CROSSIDENTIFICATIONRESULTS FOUND FOR JOBID ' || pJOB_ID, SYSDATE, NULL, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE IMPORT_COGNITEC_TO_LIBIAS_P3 (pJOB_ID IN VARCHAR) AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  NO_RESULTS_EX EXCEPTION;

  TYPE RESULTS IS TABLE OF DBSCANADMIN.CROSSIDENTIFICATIONRESULTS%ROWTYPE;
  RESULTS_TO_IMPORT RESULTS;

  TYPE IDS IS TABLE OF INCIDENT.CASE_ID%TYPE;
  CASES_IDS IDS;

  TODAY DATE := TRUNC(SYSDATE);

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS WHERE JOBID = pJOB_ID;
    CASE
        WHEN RESULTS_COUNT > 0 AND RESULTS_COUNT <= 100000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 100000 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 1000000 AND RESULTS_COUNT <= 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        WHEN RESULTS_COUNT > 10000000 THEN BATCH_SIZE := 200000;
        ELSE RAISE NO_RESULTS_EX;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        SELECT RANK, JOBID, GALLERYID, SCORE, PROBEID BULK COLLECT INTO RESULTS_TO_IMPORT FROM (
          SELECT RANK, JOBID, GALLERYID, SCORE, PROBEID, ROWNUM RNUM FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS
          WHERE JOBID = pJOB_ID AND ROWNUM <= (RESULTS_IMPORTED + BATCH_SIZE) ORDER BY ROWID
        ) WHERE RNUM > RESULTS_IMPORTED;

        FORALL i IN RESULTS_TO_IMPORT.first .. RESULTS_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO INCIDENT(CASE_ID, PROBE_ID, GALLERY_ID, SCORE, RANK, JOB_ID, DATE_CREATED, FILTER, PRIORITY_ID, STATUS_ID)
        VALUES (INCIDENT_SEQ.NEXTVAL, RESULTS_TO_IMPORT(i).PROBEID, RESULTS_TO_IMPORT(i).GALLERYID, RESULTS_TO_IMPORT(i).SCORE, RESULTS_TO_IMPORT(i).RANK, pJOB_ID, TODAY, 0, 3, 1)
        RETURNING CASE_ID BULK COLLECT INTO CASES_IDS;

        RESULTS_IMPORTED := RESULTS_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
        VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, NULL, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_RESULTS_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'DEBUG', 'STATUS: NO CROSSIDENTIFICATIONRESULTS FOUND FOR JOBID ' || pJOB_ID, SYSDATE, NULL, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure IMPORT_LIBIAS_TO_COGNITEC
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_LIBIAS_TO_COGNITEC (pJOB_ID IN VARCHAR) AS
  IMAGES_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  IMAGES_IMPORTED NUMBER := 0;

  NO_IMAGES_EX EXCEPTION;

  TYPE IMG IS TABLE OF BILD%ROWTYPE;
  IMAGES_TO_IMPORT IMG;

  TYPE IDS IS TABLE OF DBSCANADMIN.CASES.RECORDID%TYPE;
  CASES_IDS IDS;

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO IMAGES_COUNT FROM BILD WHERE JOB_ID IS NULL;
    CASE
        WHEN IMAGES_COUNT > 0 AND IMAGES_COUNT <= 1000 THEN BATCH_SIZE := IMAGES_COUNT;
        WHEN IMAGES_COUNT > 1000 AND IMAGES_COUNT <= 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 10);
        WHEN IMAGES_COUNT > 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 100);
        ELSE RAISE NO_IMAGES_EX;
    END CASE;

    WHILE (IMAGES_COUNT - IMAGES_IMPORTED) > 0 LOOP
        SELECT OID, JOB_ID, DATE_CREATED, BILDDATEN BULK COLLECT INTO IMAGES_TO_IMPORT
        FROM BILD WHERE JOB_ID IS NULL AND ROWNUM <= BATCH_SIZE;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO DBSCANADMIN.CASES(RECORDID, ISSUER, SERIAL, CASEID, NAME)
        VALUES (IMAGES_TO_IMPORT(i).OID, 1, 1, IMAGES_TO_IMPORT(i).OID, IMAGES_TO_IMPORT(i).OID)
        RETURNING RECORDID BULK COLLECT INTO CASES_IDS;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO DBSCANADMIN.IMAGES(RECORDID, ISSUER, SERIAL, CASEID, IMG)
        VALUES (IMAGES_TO_IMPORT(i).OID, 1, 1, IMAGES_TO_IMPORT(i).OID, IMAGES_TO_IMPORT(i).BILDDATEN);

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        UPDATE BILD SET JOB_ID = pJOB_ID WHERE OID = IMAGES_TO_IMPORT(i).OID;

        IMAGES_IMPORTED := IMAGES_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
        VALUES ('IMPORT_LIBIAS_TO_COGNITEC', 'DEBUG', 'STATUS: ' || (ROUND((IMAGES_IMPORTED / IMAGES_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, NULL, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_IMAGES_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_LIBIAS_TO_COGNITEC', 'DEBUG', 'STATUS: NO IMAGES FOUND IN LIBIAS FOR JOBID ' || pJOB_ID, SYSDATE, NULL, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_LIBIAS_TO_COGNITEC', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure IMPORT_MARIS_TO_LIBIAS
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_MARIS_TO_LIBIAS AS
  IMAGES_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  IMAGES_IMPORTED NUMBER := 0;

  NO_IMAGES_EX EXCEPTION;

  TYPE IMG IS TABLE OF COGNI.BILD%ROWTYPE;
  IMAGES_TO_IMPORT IMG;

  TYPE IDS IS TABLE OF BILD.OID%TYPE;
  IMPORTED_IDS IDS;

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO IMAGES_COUNT FROM COGNI.BILD
    WHERE BILDDATEN IS NOT NULL AND NOT EXISTS (SELECT 1 FROM BILD WHERE OID = COGNI.BILD.OID);
    CASE
        WHEN IMAGES_COUNT > 0 AND IMAGES_COUNT <= 1000 THEN BATCH_SIZE := IMAGES_COUNT;
        WHEN IMAGES_COUNT > 1000 AND IMAGES_COUNT <= 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 10);
        WHEN IMAGES_COUNT > 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 100);
        ELSE RAISE NO_IMAGES_EX;
    END CASE;

    WHILE (IMAGES_COUNT - IMAGES_IMPORTED) > 0 LOOP
        SELECT OID, DATE_MODIFIED, BILDDATEN BULK COLLECT INTO IMAGES_TO_IMPORT FROM COGNI.BILD
        WHERE BILDDATEN IS NOT NULL AND NOT EXISTS (SELECT 1 FROM BILD WHERE OID = COGNI.BILD.OID) AND ROWNUM <= BATCH_SIZE;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO BILD(OID, BILDDATEN, DATE_CREATED)
        VALUES (IMAGES_TO_IMPORT(i).OID, IMAGES_TO_IMPORT(i).BILDDATEN, IMAGES_TO_IMPORT(i).DATE_MODIFIED)
        RETURNING OID BULK COLLECT INTO IMPORTED_IDS;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        DELETE FROM COGNI.BILD WHERE OID = IMAGES_TO_IMPORT(i).OID;

        IMAGES_IMPORTED := IMAGES_IMPORTED + IMPORTED_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
        VALUES ('IMPORT_MARIS_TO_LIBIAS', 'DEBUG', 'STATUS: ' || (ROUND((IMAGES_IMPORTED / IMAGES_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, NULL, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_IMAGES_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_MARIS_TO_LIBIAS', 'DEBUG', 'STATUS: NO IMAGES FOUND IN MARIS', SYSDATE, NULL, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('IMPORT_MARIS_TO_LIBIAS', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
END;
/

----------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_UNDER_TRESHOLD
----------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_UNDER_TRESHOLD AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM INCIDENT
    WHERE FILTER = 0 AND STATUS_ID = 1 AND SCORE < TO_BINARY_DOUBLE(0.99);
    CASE
        WHEN RESULTS_COUNT >= 0 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 1000000 AND RESULTS_COUNT <= 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        ELSE NULL;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        UPDATE INCIDENT SET FILTER = 1 WHERE FILTER = 0 AND STATUS_ID = 1
        AND SCORE < TO_BINARY_DOUBLE(0.99) AND ROWNUM <= BATCH_SIZE;

        RESULTS_IMPORTED := RESULTS_IMPORTED + SQL%ROWCOUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
        VALUES ('FILTER_INCIDENT_UNDER_TRESHOLD', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, NULL, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('FILTER_INCIDENT_UNDER_TRESHOLD', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

----------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_SAME_IMAGES
----------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_SAME_IMAGES AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 2
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND PROBE_ID = GALLERY_ID;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('FILTER_INCIDENT_SAME_IMAGES', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_DUPLICATES
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_DUPLICATES AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT I SET I.FILTER = 3
    WHERE I.FILTER = 0 AND I.STATUS_ID = 1
    AND EXISTS (
        SELECT 1 FROM INCIDENT DUPLICATE
        WHERE I.FILTER = 0
        AND I.PROBE_ID = DUPLICATE.GALLERY_ID
        AND I.GALLERY_ID = DUPLICATE.PROBE_ID
        AND (I.PROBE_ID > DUPLICATE.PROBE_ID OR DUPLICATE.STATUS_ID <> 1)
    );
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('FILTER_INCIDENT_DUPLICATES', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_EQUAL_PKZ
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_EQUAL_PKZ AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 4
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND A_PKZ = B_PKZ;
    COMMIT;

    UPDATE INCIDENT SET STATUS_ID = 10
    WHERE FILTER = 0 AND STATUS_ID NOT IN (2, 4, 10)
    AND A_PKZ = B_PKZ;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('FILTER_INCIDENT_EQUAL_PKZ', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_EQUAL_FILE_NUM
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_EQUAL_FILE_NUM AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 5
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND A_AKTENZEICHEN = B_AKTENZEICHEN;
    COMMIT;

    UPDATE INCIDENT SET STATUS_ID = 10
    WHERE FILTER = 0 AND STATUS_ID NOT IN (2, 4, 10)
    AND A_AKTENZEICHEN = B_AKTENZEICHEN;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('FILTER_INCIDENT_EQUAL_FILE_NUM', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_AFTER_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_EQUAL_PKZ();
    FILTER_INCIDENT_EQUAL_FILE_NUM();
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_BEFORE_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_BEFORE_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_UNDER_TRESHOLD();
    FILTER_INCIDENT_SAME_IMAGES();
    FILTER_INCIDENT_DUPLICATES();
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_EQUAL_PKZ
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_EQUAL_PKZ AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 0
    WHERE FILTER = 4 AND STATUS_ID = 1;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('RESET_FILTER_EQUAL_PKZ', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_EQUAL_FILE_NUM
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_EQUAL_FILE_NUM AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 0
    WHERE FILTER = 5 AND STATUS_ID = 1;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, USER_ID, TYPE)
    VALUES ('RESET_FILTER_EQUAL_FILE_NUM', 'ERROR', err_code || ' - ' || err_message, SYSDATE, NULL, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_AFTER_DATA_FETCH AS
BEGIN
    RESET_FILTER_EQUAL_PKZ();
    RESET_FILTER_EQUAL_FILE_NUM();
END;
/

--------------------------------------------------------
--  VIEWS
--------------------------------------------------------

--------------------------------------------------------
--  DDL for View COGNITEC_IMAGES
--------------------------------------------------------

--- FOR PRODUCTIVE ENVIROMENT ---
/*CREATE OR REPLACE VIEW "LIBIASNEW"."COGNITEC_IMAGES" ("EYERX", "EYERY", "EYELX", "EYELY", "RECORDID") AS
SELECT EYERX, EYERY, EYELX, EYELY, RECORDID FROM DBSCANADMIN.IMAGES;*/

--- FOR TESTING ENVIROMENT ---
CREATE OR REPLACE VIEW "COGNITEC_IMAGES" ("EYERX", "EYERY", "EYELX", "EYELY", "RECORDID") AS 
SELECT 0, 0, 0, 0, OID FROM BILD;
