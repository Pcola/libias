--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_LOCKED_FILES
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_LOCKED_FILES AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET PRIORITY_ID = 0
    WHERE FILTER = 0 AND PRIORITY_ID <> 0 AND STATUS_ID NOT IN (7, 10)
    AND (A_AKTE_LOCKED IS NOT NULL OR B_AKTE_LOCKED IS NOT NULL);
    COMMIT;

    UPDATE INCIDENT SET PRIORITY_ID = 1
    WHERE FILTER = 0 AND PRIORITY_ID = 0
    AND A_AKTE_LOCKED IS NULL AND B_AKTE_LOCKED IS NULL;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_LOCKED_FILES', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_AFTER_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_MISSING_DATA();
    FILTER_INCIDENT_DELETED_DATA();
    FILTER_INCIDENT_EQUAL_PKZ();
    FILTER_INCIDENT_EQUAL_FILE_NUM();
    FILTER_INCIDENT_PKZ_PAIR_DUPL();
    FILTER_INCIDENT_LOCKED_FILES();
    FILTER_INCIDENT_PROOF_CASES();
END;
/
