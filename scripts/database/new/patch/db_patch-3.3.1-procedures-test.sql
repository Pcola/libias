--------------------------------------------------------
--  DDL for Procedure IMPORT_COGNITEC_TO_LIBIAS
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_COGNITEC_TO_LIBIAS (pJOB_ID IN VARCHAR) AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  NO_RESULTS_EX EXCEPTION;

  TYPE RESULTS IS TABLE OF DBSCANADMIN.CROSSIDENTIFICATIONRESULTS%ROWTYPE;
  RESULTS_TO_IMPORT RESULTS;

  TYPE IDS IS TABLE OF INCIDENT.CASE_ID%TYPE;
  CASES_IDS IDS;

  TODAY DATE := TRUNC(SYSDATE);

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS WHERE JOBID = pJOB_ID;
    CASE
        WHEN RESULTS_COUNT > 0 AND RESULTS_COUNT <= 100000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 100000 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        ELSE RAISE NO_RESULTS_EX;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        SELECT RANK, PROBEID, GALLERYID, SCORE, JOBID BULK COLLECT INTO RESULTS_TO_IMPORT FROM (
          SELECT RANK, PROBEID, GALLERYID, SCORE, JOBID, ROWNUM RNUM FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS
          WHERE JOBID = pJOB_ID AND ROWNUM <= (RESULTS_IMPORTED + BATCH_SIZE) ORDER BY ROWID
        ) WHERE RNUM > RESULTS_IMPORTED;

        FORALL i IN RESULTS_TO_IMPORT.first .. RESULTS_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO INCIDENT(CASE_ID, PROBE_ID, GALLERY_ID, SCORE, RANK, JOB_ID, DATE_CREATED, FILTER, PRIORITY_ID, STATUS_ID)
        VALUES (INCIDENT_SEQ.NEXTVAL, RESULTS_TO_IMPORT(i).PROBEID, RESULTS_TO_IMPORT(i).GALLERYID, RESULTS_TO_IMPORT(i).SCORE, RESULTS_TO_IMPORT(i).RANK, pJOB_ID, TODAY, 0, 1, 1)
        RETURNING CASE_ID BULK COLLECT INTO CASES_IDS;

        RESULTS_IMPORTED := RESULTS_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
        VALUES ('IMPORT_COGNITEC_TO_LIBIAS', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_RESULTS_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS', 'DEBUG', 'STATUS: NO CROSSIDENTIFICATIONRESULTS FOUND FOR JOBID ' || pJOB_ID, SYSDATE, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE IMPORT_COGNITEC_TO_LIBIAS_P3 (pJOB_ID IN VARCHAR) AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  NO_RESULTS_EX EXCEPTION;

  TYPE RESULTS IS TABLE OF DBSCANADMIN.CROSSIDENTIFICATIONRESULTS%ROWTYPE;
  RESULTS_TO_IMPORT RESULTS;

  TYPE IDS IS TABLE OF INCIDENT.CASE_ID%TYPE;
  CASES_IDS IDS;

  TODAY DATE := TRUNC(SYSDATE);

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS WHERE JOBID = pJOB_ID;
    CASE
        WHEN RESULTS_COUNT > 0 AND RESULTS_COUNT <= 100000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 100000 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 1000000 AND RESULTS_COUNT <= 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        WHEN RESULTS_COUNT > 10000000 THEN BATCH_SIZE := 200000;
        ELSE RAISE NO_RESULTS_EX;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        SELECT RANK, PROBEID, GALLERYID, SCORE, JOBID BULK COLLECT INTO RESULTS_TO_IMPORT FROM (
          SELECT RANK, PROBEID, GALLERYID, SCORE, JOBID, ROWNUM RNUM FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS
          WHERE JOBID = pJOB_ID AND ROWNUM <= (RESULTS_IMPORTED + BATCH_SIZE) ORDER BY ROWID
        ) WHERE RNUM > RESULTS_IMPORTED;

        FORALL i IN RESULTS_TO_IMPORT.first .. RESULTS_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO INCIDENT(CASE_ID, PROBE_ID, GALLERY_ID, SCORE, RANK, JOB_ID, DATE_CREATED, FILTER, PRIORITY_ID, STATUS_ID)
        VALUES (INCIDENT_SEQ.NEXTVAL, RESULTS_TO_IMPORT(i).PROBEID, RESULTS_TO_IMPORT(i).GALLERYID, RESULTS_TO_IMPORT(i).SCORE, RESULTS_TO_IMPORT(i).RANK, pJOB_ID, TODAY, 0, 3, 1)
        RETURNING CASE_ID BULK COLLECT INTO CASES_IDS;

        RESULTS_IMPORTED := RESULTS_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
        VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_RESULTS_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'DEBUG', 'STATUS: NO CROSSIDENTIFICATIONRESULTS FOUND FOR JOBID ' || pJOB_ID, SYSDATE, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE IMPORT_COGNITEC_TO_LIBIAS_P3R (pJOB_ID IN VARCHAR) AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  NO_RESULTS_EX EXCEPTION;

  TYPE RESULTS IS TABLE OF DBSCANADMIN.CROSSIDENTIFICATIONRESULTS%ROWTYPE;
  RESULTS_TO_IMPORT RESULTS;

  TYPE IDS IS TABLE OF INCIDENT.CASE_ID%TYPE;
  CASES_IDS IDS;

  TODAY DATE := TRUNC(SYSDATE);

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS WHERE JOBID = pJOB_ID AND RANK <= 100;
    CASE
        WHEN RESULTS_COUNT > 0 AND RESULTS_COUNT <= 100000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 100000 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 1000000 AND RESULTS_COUNT <= 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        WHEN RESULTS_COUNT > 10000000 THEN BATCH_SIZE := 200000;
        ELSE RAISE NO_RESULTS_EX;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        SELECT RANK, PROBEID, GALLERYID, SCORE, JOBID BULK COLLECT INTO RESULTS_TO_IMPORT FROM (
          SELECT RANK, PROBEID, GALLERYID, SCORE, JOBID, ROWNUM RNUM FROM DBSCANADMIN.CROSSIDENTIFICATIONRESULTS
          WHERE JOBID = pJOB_ID AND RANK <= 100 AND ROWNUM <= (RESULTS_IMPORTED + BATCH_SIZE) ORDER BY ROWID
        ) WHERE RNUM > RESULTS_IMPORTED;

        FORALL i IN RESULTS_TO_IMPORT.first .. RESULTS_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO INCIDENT(CASE_ID, PROBE_ID, GALLERY_ID, SCORE, RANK, JOB_ID, DATE_CREATED, FILTER, PRIORITY_ID, STATUS_ID)
        VALUES (INCIDENT_SEQ.NEXTVAL, RESULTS_TO_IMPORT(i).PROBEID, RESULTS_TO_IMPORT(i).GALLERYID, RESULTS_TO_IMPORT(i).SCORE, RESULTS_TO_IMPORT(i).RANK, pJOB_ID, TODAY, 0, 3, 1)
        RETURNING CASE_ID BULK COLLECT INTO CASES_IDS;

        RESULTS_IMPORTED := RESULTS_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
        VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_RESULTS_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'DEBUG', 'STATUS: NO CROSSIDENTIFICATIONRESULTS FOUND FOR JOBID ' || pJOB_ID, SYSDATE, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_COGNITEC_TO_LIBIAS_P3', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure IMPORT_LIBIAS_TO_COGNITEC
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_LIBIAS_TO_COGNITEC (pJOB_ID IN VARCHAR) AS
  IMAGES_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  IMAGES_IMPORTED NUMBER := 0;

  NO_IMAGES_EX EXCEPTION;

  TYPE IMG IS TABLE OF BILD%ROWTYPE;
  IMAGES_TO_IMPORT IMG;

  TYPE IDS IS TABLE OF DBSCANADMIN.CASES.RECORDID%TYPE;
  CASES_IDS IDS;

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO IMAGES_COUNT FROM BILD WHERE JOB_ID IS NULL;
    CASE
        WHEN IMAGES_COUNT > 0 AND IMAGES_COUNT <= 1000 THEN BATCH_SIZE := IMAGES_COUNT;
        WHEN IMAGES_COUNT > 1000 AND IMAGES_COUNT <= 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 10);
        WHEN IMAGES_COUNT > 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 100);
        ELSE RAISE NO_IMAGES_EX;
    END CASE;

    WHILE (IMAGES_COUNT - IMAGES_IMPORTED) > 0 LOOP
        SELECT OID, JOB_ID, DATE_CREATED, BILDDATEN BULK COLLECT INTO IMAGES_TO_IMPORT
        FROM BILD WHERE JOB_ID IS NULL AND ROWNUM <= BATCH_SIZE;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO DBSCANADMIN.CASES(RECORDID, ISSUER, SERIAL, CASEID, NAME)
        VALUES (IMAGES_TO_IMPORT(i).OID, 1, 1, IMAGES_TO_IMPORT(i).OID, IMAGES_TO_IMPORT(i).OID)
        RETURNING RECORDID BULK COLLECT INTO CASES_IDS;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO DBSCANADMIN.IMAGES(RECORDID, ISSUER, SERIAL, CASEID, IMG)
        VALUES (IMAGES_TO_IMPORT(i).OID, 1, 1, IMAGES_TO_IMPORT(i).OID, IMAGES_TO_IMPORT(i).BILDDATEN);

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        UPDATE BILD SET JOB_ID = pJOB_ID WHERE OID = IMAGES_TO_IMPORT(i).OID;

        IMAGES_IMPORTED := IMAGES_IMPORTED + CASES_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
        VALUES ('IMPORT_LIBIAS_TO_COGNITEC', 'DEBUG', 'STATUS: ' || (ROUND((IMAGES_IMPORTED / IMAGES_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_IMAGES_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_LIBIAS_TO_COGNITEC', 'DEBUG', 'STATUS: NO IMAGES FOUND IN LIBIAS FOR JOBID ' || pJOB_ID, SYSDATE, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_LIBIAS_TO_COGNITEC', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure IMPORT_MARIS_TO_LIBIAS
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_MARIS_TO_LIBIAS AS
  IMAGES_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  IMAGES_IMPORTED NUMBER := 0;

  NO_IMAGES_EX EXCEPTION;

  TYPE IMG IS TABLE OF COGNI.BILD%ROWTYPE;
  IMAGES_TO_IMPORT IMG;

  TYPE IDS IS TABLE OF BILD.OID%TYPE;
  IMPORTED_IDS IDS;

  err_num NUMBER;
  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO IMAGES_COUNT FROM COGNI.BILD
    WHERE BILDDATEN IS NOT NULL AND NOT EXISTS (SELECT 1 FROM BILD WHERE OID = COGNI.BILD.OID);
    CASE
        WHEN IMAGES_COUNT > 0 AND IMAGES_COUNT <= 1000 THEN BATCH_SIZE := IMAGES_COUNT;
        WHEN IMAGES_COUNT > 1000 AND IMAGES_COUNT <= 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 10);
        WHEN IMAGES_COUNT > 100000 THEN BATCH_SIZE := CEIL(IMAGES_COUNT / 100);
        ELSE RAISE NO_IMAGES_EX;
    END CASE;

    WHILE (IMAGES_COUNT - IMAGES_IMPORTED) > 0 LOOP
        SELECT OID, DATE_MODIFIED, BILDDATEN BULK COLLECT INTO IMAGES_TO_IMPORT FROM COGNI.BILD
        WHERE BILDDATEN IS NOT NULL AND NOT EXISTS (SELECT 1 FROM BILD WHERE OID = COGNI.BILD.OID) AND ROWNUM <= BATCH_SIZE;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        INSERT INTO BILD(OID, BILDDATEN, DATE_CREATED)
        VALUES (IMAGES_TO_IMPORT(i).OID, IMAGES_TO_IMPORT(i).BILDDATEN, IMAGES_TO_IMPORT(i).DATE_MODIFIED)
        RETURNING OID BULK COLLECT INTO IMPORTED_IDS;

        FORALL i IN IMAGES_TO_IMPORT.first .. IMAGES_TO_IMPORT.last SAVE EXCEPTIONS
        DELETE FROM COGNI.BILD WHERE OID = IMAGES_TO_IMPORT(i).OID;

        IMAGES_IMPORTED := IMAGES_IMPORTED + IMPORTED_IDS.COUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
        VALUES ('IMPORT_MARIS_TO_LIBIAS', 'DEBUG', 'STATUS: ' || (ROUND((IMAGES_IMPORTED / IMAGES_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN NO_IMAGES_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_MARIS_TO_LIBIAS', 'DEBUG', 'STATUS: NO IMAGES FOUND IN MARIS', SYSDATE, 5);
    COMMIT;
  WHEN OTHERS THEN
    IF SQL%BULK_EXCEPTIONS.COUNT > 0 THEN
      err_num := SQL%BULK_EXCEPTIONS.COUNT;
      err_code := SQL%BULK_EXCEPTIONS(1).ERROR_CODE;
      err_message := SUBSTR(SQLERRM(-SQL%BULK_EXCEPTIONS(1).ERROR_CODE), 1 , 256);
    ELSE
      err_num := 1;
      err_code := SQLCODE;
      err_message := SUBSTR(SQLERRM, 1, 256);
    END IF;
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_MARIS_TO_LIBIAS', 'ERROR', 'IMPORT FAILED FOR: ' || err_num || ' IMAGES. FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_UNDER_TRESHOLD
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_UNDER_TRESHOLD AS
  RESULTS_COUNT NUMBER := 0;
  BATCH_SIZE NUMBER := 0;
  RESULTS_IMPORTED NUMBER := 0;

  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    SELECT COUNT(1) INTO RESULTS_COUNT FROM INCIDENT
    WHERE FILTER = 0 AND STATUS_ID = 1 AND SCORE < TO_BINARY_DOUBLE(0.99);
    CASE
        WHEN RESULTS_COUNT >= 0 AND RESULTS_COUNT <= 1000000 THEN BATCH_SIZE := RESULTS_COUNT;
        WHEN RESULTS_COUNT > 1000000 AND RESULTS_COUNT <= 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 10);
        WHEN RESULTS_COUNT > 10000000 THEN BATCH_SIZE := CEIL(RESULTS_COUNT / 100);
        ELSE NULL;
    END CASE;

    WHILE (RESULTS_COUNT - RESULTS_IMPORTED) > 0 LOOP
        UPDATE INCIDENT SET FILTER = 1 WHERE FILTER = 0 AND STATUS_ID = 1
        AND SCORE < TO_BINARY_DOUBLE(0.99) AND ROWNUM <= BATCH_SIZE;

        RESULTS_IMPORTED := RESULTS_IMPORTED + SQL%ROWCOUNT;
        INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
        VALUES ('FILTER_INCIDENT_UNDER_TRESHOLD', 'DEBUG', 'STATUS: ' || (ROUND((RESULTS_IMPORTED / RESULTS_COUNT) * 100, 0)) || '% FINISHED', SYSDATE, 5);
        COMMIT;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_UNDER_TRESHOLD', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_SAME_IMAGES
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_SAME_IMAGES AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 2
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND PROBE_ID = GALLERY_ID;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_SAME_IMAGES', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_DUPLICATES
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_DUPLICATES AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT I SET I.FILTER = 3
    WHERE I.FILTER = 0 AND I.STATUS_ID = 1
    AND EXISTS (
        SELECT 1 FROM INCIDENT DUPLICATE
        WHERE I.FILTER = 0
        AND I.PROBE_ID = DUPLICATE.GALLERY_ID
        AND I.GALLERY_ID = DUPLICATE.PROBE_ID
        AND (I.PROBE_ID > DUPLICATE.PROBE_ID OR DUPLICATE.STATUS_ID <> 1)
    );
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_DUPLICATES', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_EQUAL_PKZ
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_EQUAL_PKZ AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 4
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND A_PKZ = B_PKZ;
    COMMIT;

    UPDATE INCIDENT SET STATUS_ID = 10
    WHERE FILTER = 0 AND STATUS_ID NOT IN (2, 4, 10)
    AND A_PKZ = B_PKZ;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_EQUAL_PKZ', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_EQUAL_FILE_NUM
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_EQUAL_FILE_NUM AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 5
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND A_AKTENZEICHEN = B_AKTENZEICHEN;
    COMMIT;

    UPDATE INCIDENT SET STATUS_ID = 10
    WHERE FILTER = 0 AND STATUS_ID NOT IN (2, 4, 10)
    AND A_AKTENZEICHEN = B_AKTENZEICHEN;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_EQUAL_FILE_NUM', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_PKZ_PAIR_DUPL
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_PKZ_PAIR_DUPL AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT I SET I.FILTER = 6
    WHERE I.FILTER = 0 AND I.STATUS_ID = 1
    AND EXISTS (
        SELECT 1 FROM INCIDENT I2
        WHERE I2.FILTER = 0 AND I2.CASE_ID < I.CASE_ID
        AND (I2.A_PKZ = I.A_PKZ AND I2.B_PKZ = I.B_PKZ
          OR I2.A_PKZ = I.B_PKZ AND I2.B_PKZ = I.A_PKZ)
    );
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_PKZ_PAIR_DUPL', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_MISSING_DATA
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_MISSING_DATA AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 9
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND A_ANTRAGSTELLER_OID IS NULL;
    COMMIT;

    UPDATE INCIDENT SET FILTER = 9
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND B_ANTRAGSTELLER_OID IS NULL;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_MISSING_DATA', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_AFTER_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_MISSING_DATA();
    FILTER_INCIDENT_EQUAL_PKZ();
    FILTER_INCIDENT_EQUAL_FILE_NUM();
    FILTER_INCIDENT_PKZ_PAIR_DUPL();
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_BEFORE_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_BEFORE_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_UNDER_TRESHOLD();
    FILTER_INCIDENT_SAME_IMAGES();
    FILTER_INCIDENT_DUPLICATES();
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_EQUAL_PKZ
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_EQUAL_PKZ AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 0
    WHERE FILTER = 4 AND STATUS_ID = 1;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('RESET_FILTER_EQUAL_PKZ', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_EQUAL_FILE_NUM
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_EQUAL_FILE_NUM AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 0
    WHERE FILTER = 5 AND STATUS_ID = 1;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('RESET_FILTER_EQUAL_FILE_NUM', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_PKZ_PAIR_DUPL
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_PKZ_PAIR_DUPL AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 0
    WHERE FILTER = 6 AND STATUS_ID = 1;
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('RESET_FILTER_PKZ_PAIR_DUPL', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure RESET_FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE RESET_FILTER_AFTER_DATA_FETCH AS
BEGIN
    RESET_FILTER_EQUAL_PKZ();
    RESET_FILTER_EQUAL_FILE_NUM();
    RESET_FILTER_PKZ_PAIR_DUPL();
END;
/
