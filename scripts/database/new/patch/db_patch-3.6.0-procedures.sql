--------------------------------------------------------
--  DDL for Procedure IMPORT_DELETED_TO_LIBIAS
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE IMPORT_DELETED_TO_LIBIAS (pDATE IN DATE) AS
  IMAGES_COUNT NUMBER := 0;
  DATE_PARAM DATE := TRUNC(pDATE);
  NO_IMAGES_EX EXCEPTION;

  err_code NUMBER;
  err_message VARCHAR2(256);

BEGIN
    SELECT COUNT(1) INTO IMAGES_COUNT FROM COGNI.BILD_DELETED WHERE DATE_MODIFIED = DATE_PARAM;
    IF IMAGES_COUNT = 0 THEN
        RAISE NO_IMAGES_EX;
    END IF;

    UPDATE BILD SET DATE_DELETED = DATE_PARAM, ACTIVE = 0
    WHERE OID IN (SELECT OID FROM COGNI.BILD_DELETED WHERE DATE_MODIFIED = DATE_PARAM);

    DELETE FROM COGNI.BILD_DELETED WHERE DATE_MODIFIED = DATE_PARAM;

    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_DELETED_TO_LIBIAS', 'DEBUG', 'STATUS: FINISHED', SYSDATE, 5);
    COMMIT;

EXCEPTION
  WHEN NO_IMAGES_EX THEN
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_DELETED_TO_LIBIAS', 'DEBUG', 'STATUS: NO DELETED IMAGES FOUND IN MARIS', SYSDATE, 5);
    COMMIT;
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('IMPORT_DELETED_TO_LIBIAS', 'ERROR', 'IMPORT FAILED, FIRST ERROR: ' || err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_DELETED_DATA
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_DELETED_DATA AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET FILTER = 10
    WHERE FILTER = 0 AND A_PERSON_DELETED IS NOT NULL;
    COMMIT;

    UPDATE INCIDENT SET FILTER = 10
    WHERE FILTER = 0 AND B_PERSON_DELETED IS NOT NULL;
    COMMIT;

    UPDATE INCIDENT SET FILTER = 10
    WHERE FILTER = 0 AND A_AKTE_DELETED IS NOT NULL;
    COMMIT;

    UPDATE INCIDENT SET FILTER = 10
    WHERE FILTER = 0 AND B_AKTE_DELETED IS NOT NULL;
    COMMIT;

    UPDATE INCIDENT I SET FILTER = 10
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND EXISTS (
        SELECT 1 FROM BILD B
        WHERE B.OID = I.PROBE_ID
        AND B.DATE_DELETED IS NOT NULL
    );
    COMMIT;

    UPDATE INCIDENT I SET FILTER = 10
    WHERE FILTER = 0 AND STATUS_ID = 1
    AND EXISTS (
        SELECT 1 FROM BILD B
        WHERE B.OID = I.GALLERY_ID
        AND B.DATE_DELETED IS NOT NULL
    );
    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_DELETED_DATA', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_AFTER_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_MISSING_DATA();
    FILTER_INCIDENT_DELETED_DATA();
    FILTER_INCIDENT_EQUAL_PKZ();
    FILTER_INCIDENT_EQUAL_FILE_NUM();
    FILTER_INCIDENT_PKZ_PAIR_DUPL();
END;
/
