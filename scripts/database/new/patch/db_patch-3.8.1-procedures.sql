--------------------------------------------------------
--  DDL for Procedure FILTER_INCIDENT_PROOF_CASES
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_INCIDENT_PROOF_CASES AS
  err_code NUMBER;
  err_message VARCHAR2(256);
BEGIN
    UPDATE INCIDENT SET PRIORITY_ID = 9
    WHERE FILTER = 0 AND PRIORITY_ID = 1
    AND (A_ANTRAGSTYP = 'Erstregistrierungsprüfvorakte' AND B_ANTRAGSTYP = 'Vorakte'
      OR B_ANTRAGSTYP = 'Erstregistrierungsprüfvorakte' AND A_ANTRAGSTYP = 'Vorakte')
    AND A_AZRNUMMER = B_AZRNUMMER AND A_DNUMMER = B_DNUMMER
    AND A_GESCHLECHT = B_GESCHLECHT AND A_GEBURTSDATUM = B_GEBURTSDATUM
    AND UPPER(A_FAMILIENNAME) = UPPER(B_FAMILIENNAME) AND UPPER(A_VORNAME) = UPPER(B_VORNAME)
    AND UPPER(A_GEBURTSORT) = UPPER(B_GEBURTSORT) AND UPPER(A_STAATSANGEHOERIGKEIT) = UPPER(B_STAATSANGEHOERIGKEIT);

    COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    err_code := SQLCODE;
    err_message := SUBSTR(SQLERRM, 1, 256);
    ROLLBACK;
    INSERT INTO LOG(METHOD, SEVERITY, MESSAGE, TIMESTAMP, TYPE)
    VALUES ('FILTER_INCIDENT_PROOF_CASES', 'ERROR', err_code || ' - ' || err_message, SYSDATE, 5);
    COMMIT;
    RAISE;
END;
/

--------------------------------------------------------
--  DDL for Procedure FILTER_AFTER_DATA_FETCH
--------------------------------------------------------

CREATE OR REPLACE PROCEDURE FILTER_AFTER_DATA_FETCH AS
BEGIN
    FILTER_INCIDENT_MISSING_DATA();
    FILTER_INCIDENT_DELETED_DATA();
    FILTER_INCIDENT_EQUAL_PKZ();
    FILTER_INCIDENT_EQUAL_FILE_NUM();
    FILTER_INCIDENT_PKZ_PAIR_DUPL();
    FILTER_INCIDENT_PROOF_CASES();
END;
/
